//==
// Grid System - Base
//##

@mixin grid-base($breakpoint) {
    // Large doesn't need an "only" since it operates on min width.
    @if $breakpoint != l {
        @include bp-max($breakpoint) {

            [class*=col-] {
                // Reset classes for each level.
                &.reset-#{$breakpoint}-only {
                    clear: both;
                    margin-left: 0;

                    [dir="rtl"] & {
                        margin-right: 0;
                    }
                }
            }
        }
    }
    // Set the margin for each following column.
    [class*=col-#{$breakpoint}] {
        margin-left: $grid-column-gutter;

        &:first-of-type {
            margin-left: 0;
        }

        [dir="rtl"] & {
            margin-left: 0;
            margin-right: $grid-column-gutter;

            &:first-of-type {
                margin-right: 0;
            }
        }
    }

    .no-gutter > [class*=col-#{$breakpoint}] {
        margin-left: 0;

        [dir="rtl"] & {
            margin-left: 0;
            margin-right: 0;
        }
    }

    [class*=col-] {
        // Global reset classes.
        &.reset-#{$breakpoint} {
            clear: both;
            margin-left: 0;

            [dir="rtl"] & {
                margin-right: 0;
            }
        }
    }
}

//==
// Grid System - Columns
//##
@mixin grid-columns($breakpoint) {
    // Calculate column width and width with gutter.
    $column-width: (100% / $grid-column-count);
    $column-width-with-gutter: (100% - ($grid-column-gutter * ($grid-column-count - 1 ))) / $grid-column-count;

    // Loop through and set width.
    @for $i from 1 to ($grid-column-count + 1) {
        $temp-width: $column-width-with-gutter * $i + ($grid-column-gutter * $i);

        .col-#{$breakpoint}-#{$i} {
            width: $temp-width - $grid-column-gutter;
        }
        // We don't want add offsets etc to full width columns.
        @if $i != $grid-column-count {
            .offset-#{$breakpoint}-#{$i} {

                &:first-of-type {
                    margin-left: $temp-width;
                }

                [dir="rtl"] & {
                    margin-left: 0;
                    margin-right: $temp-width;

                    &:first-of-type {
                        margin-right: $temp-width;
                    }
                }
            }

            .offset-#{$breakpoint}-#{$i} {
                margin-left: $temp-width + $grid-column-gutter;

                [dir="rtl"] & {
                    margin-left: 0;
                    margin-right: $temp-width + $grid-column-gutter;
                }
            }

            .push-#{$breakpoint}-#{$i} {
                left: $temp-width;

                [dir="rtl"] & {
                    left: auto;
                    right: $temp-width;
                }
            }

            .pull-#{$breakpoint}-#{$i} {
                right: $temp-width;

                [dir="rtl"] & {
                    right: auto;
                    left: $temp-width;
                }
            }
        }
        @else {
            // Ensure that the gutter is reset on full width columns.
            .col-#{$breakpoint}-#{$i}:first-of-type,
            [class*=col-#{$breakpoint}-#{$i}] {
                margin-left: 0;

                [dir="rtl"] & {
                    margin-right: 0;
                }
            }
        }
    }
    // Loop through and build the "no-gutter" columns.
    .no-gutter {
        @for $i from 1 to ($grid-column-count + 1) {
            $temp-width: $column-width * $i;

            > .col-#{$breakpoint}-#{$i} {
                width: $temp-width;
            }

            > .offset-#{$breakpoint}-#{$i} {
                margin-left: $temp-width;

                [dir="rtl"] & {
                    margin-left: 0;
                    margin-right: $temp-width;
                }
            }

            > .push-#{$breakpoint}-#{$i} {
                left: $temp-width;

                [dir="rtl"] & {
                    left: auto;
                    right: $temp-width;
                }
            }

            > .pull-#{$breakpoint}-#{$i} {
                right: $temp-width;

                [dir="rtl"] & {
                    right: auto;
                    left: $temp-width;
                }
            }
        }
    }
}
